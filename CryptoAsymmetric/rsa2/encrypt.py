from Crypto.Util.number import bytes_to_long, getRandomInteger, GCD, inverse
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5
from gmpy import next_prime

def generate_key(n):
	e = 65537
	while True:
		x = getRandomInteger(n)
		p = int(next_prime(x))
		q = int(next_prime(p))
		n = p*q
		phin = (p-1)*(q-1)
		if GCD(phin, e) == 1:
			break
	d = inverse(e, phin)
	key = RSA.construct((n, e, d, p, q))
	return key

flag = open('flag.txt').read()


key = generate_key(1024)

enckey = PKCS1_v1_5.new(key)
enc_flag = enckey.encrypt(flag)

open("key.pub", "w").write(key.publickey().exportKey(format="PEM"))
open("flag.txt.enc", "w").write(enc_flag)

// p = 78091846990057685912882094510237654862600484723930280745721966907543636093241955669619313156185770993427083594737668055423566464529080459949568275967669096653305859323752183476403567892607270944737768734537542629397542162155388039558348126515619988799171356951688410613028232748968075882374384572229471541587
// q = 78091846990057685912882094510237654862600484723930280745721966907543636093241955669619313156185770993427083594737668055423566464529080459949568275967669096653305859323752183476403567892607270944737768734537542629397542162155388039558348126515619988799171356951688410613028232748968075882374384572229471540889
// flag{e64c1cefe06821a7f0bf102b710f738c}
